getwd()
ls
dir
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
View(table6)
View(table6)
install.packages(dplyr)
install.packages('dplyr')
table6
colnames(table6)
library(dplyr)
table6 %.%
group_by(State) %.%
summarise(sumCustomers = sum("Customers..Count."))
table6 %.%
group_by(State) %.%
summarise(sumCustomers = sum(Customers..Count.))
table6 %.%
group_by(State) %.%
states <- summarise(sumCustomers = sum(Customers..Count.))
table6 %.%
group_by(State) %.%
stateStats <- data.frame(summarise(sumCustomers = sum(Customers..Count.)))
stateStats <- table6 %.%
group_by(State) %.%
summarise(sumCustomers = sum(Customers..Count.))
table6 %.%
group_by(State) %.%
summarise(sumCustomers = sum(Customers..Count.))
table6 %>%
group_by(State) %>%
summarise(sumCustomers = sum(Customers..Count.))
aggregate(. ~ State, data=table6, sum)
merge(aggregate(Customers..Count. ~ State, data = table6, FUN = max), table6)
aggregate(Customers..Count. ~ State, data = table6, FUN = max)
table6 %>%
group_by(State) %>%
summarise(sumCustomers = sum(Customers..Count.))
library(dplyr)
totals_by_state <- table6 %>%
group_by(State) %>%
summarise(sumCustomers = sum(Customers..Count.))
totals_by_state
totals_by_state <- table6 %>%
group_by(State) %>%
summarise(sumCustomers = sum(Customers..Count.),
sumSalesMegawattHours = sum(Sales..Megawatthours.),
sumRevenuesThousandsDollars = sum(Revenues..Thousands.Dollars.))
totals_by_state
means_by_state <- table6
View(means_by_state)
colnames(means_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
View(means_by_state)
View(means_by_state)
View(totals_by_state)
View(totals_by_state)
means_by_state$sumCustomersByState <- totals_by_state$sumCustomers
[match(means_by_state$State, totals_by_state$State)]
means_by_state$sumCustomersByState <- totals_by_state$sumCustomers[match(means_by_state$State, totals_by_state$State)]
means_by_state$sumCustomersByState <-
totals_by_state$sumCustomers[match(means_by_state$State, totals_by_state$State)]
View(means_by_state)
View(means_by_state)
totals_by_state <- table6 %>%
group_by(State) %>%
summarise(sumCustomers = sum(Customers..Count.),
sumSalesMegawattHours = sum(Sales..Megawatthours.),
sumRevenuesThousandsDollars = sum(Revenues..Thousands.Dollars.))
totals_by_state
market_share_by_state$sumCustomersByState <-
totals_by_state$sumCustomers[match(market_share_by_state$State, totals_by_state$State)]
market_share_by_state
market_share_by_state <- table6
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
totals_by_state <- table6 %>%
group_by(State) %>%
summarise(sumCustomers = sum(Customers..Count.),
sumSalesMegawattHours = sum(Sales..Megawatthours.),
sumRevenuesThousandsDollars = sum(Revenues..Thousands.Dollars.))
totals_by_state
market_share_by_state$sumCustomersByState <-
totals_by_state$sumCustomers[match(market_share_by_state$State, totals_by_state$State)]
market_share_by_state
View(market_share_by_state)
View(market_share_by_state)
View(totals_by_state)
View(totals_by_state)
market_share_by_state$sumRevenueByState <-
totals_by_state$sumRevenuesThousandsDollars[match(market_share_by_state$State, totals_by_state$State)]
market_share_by_state$sumSalesByState <-
totals_by_state$salesMegawattHours[match(market_share_by_state$State, totals_by_state$State)]
View(means_by_state)
View(market_share_by_state)
View(market_share_by_state)
market_share_by_state$sumSalesByState <-
totals_by_state$salesMegawattHours[match(market_share_by_state$State, totals_by_state$State)]
View(market_share_by_state)
View(market_share_by_state)
market_share_by_state$sumSalesByState <-
totals_by_state$sumSalesMegawattHours[match(market_share_by_state$State, totals_by_state$State)]
View(market_share_by_state)
View(market_share_by_state)
market_share_by_state$customerCountProportionByState <- market_share_by_state$customerCount / market_share_by_state$sumCustomersByState
market_share_by_state$customerCountProportionByState <- as.numeric(market_share_by_state$customerCount) / as.numeric(market_share_by_state$sumCustomersByState)
View(market_share_by_state)
View(market_share_by_state)
market_share_by_state$customerCountProportionByState
market_share_by_state$revenueProportionByState <- as.numeric(market_share_by_state$revenuesThousandsDollars) / as.numeric(market_share_by_state$sumRevenueByState)
View(market_share_by_state)
View(market_share_by_state)
View(totals_by_state)
View(totals_by_state)
View(market_share_by_state)
View(market_share_by_state)
View(market_share_by_state)
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
market_share_by_state$salesProportionByState <-
as.numeric(market_share_by_state$salesMegawattHours) /
as.numeric(market_share_by_state$sumSalesByState)
View(market_share_by_state)
View(market_share_by_state)
View(market_share_by_state)
View(market_share_by_state)
library(plyr)
# Set the working directory
setwd("~/workspace/d3-project-folder/moebio-time-patterns")
# read in the two csv files we would like to work with
quandl_dmdrn_data <- read.csv(file="data.csv",head=TRUE,sep=",")
sp500_companies <- read.csv(file="SP500_Companies.csv", head=TRUE,sep=",")
# make a new dataframe from the quandl data
vis_data <- quandl_dmdrn_data
# rename columns to d3js friendly formats
colnames(vis_data)[c(1,2,3)] <- c("financialsDate", "effectiveTaxRate",
"earningsBeforeInterestAndTaxes")
library(plyr)
# Set the working directory
setwd("~/workspace/d3-project-folder/moebio-time-patterns")
# read in the two csv files we would like to work with
quandl_dmdrn_data <- read.csv(file="data.csv",head=TRUE,sep=",")
sp500_companies <- read.csv(file="SP500_Companies.csv", head=TRUE,sep=",")
# Set the working directory
setwd("~/workspace/quantified-home/electricity")
# read in a csv file containing the EIA data and assign it to a dataframe
# called table6
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
# assign the table6 dataframe to another dataframe called market_share_by_state
# we will leave the table6 dataframe unmodified for reference
# we will reshape the market_share_by_state dataframe to the form
# that we'll use in our visualization
market_share_by_state <- table6
# rename specific columns in the market_share_by_state dataframe to friendly camelCase
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
View(market_share_by_state)
View(market_share_by_state)
# Set the working directory
setwd("~/workspace/quantified-home/electricity")
# read in a csv file containing the EIA data and assign it to a dataframe
# called table6
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
# assign the table6 dataframe to another dataframe called market_share_by_state
# we will leave the table6 dataframe unmodified for reference
# we will reshape the market_share_by_state dataframe to the form
# that we'll use in our visualization
market_share_by_state <- table6
# rename specific columns in the market_share_by_state dataframe to friendly camelCase
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
View(market_share_by_state)
View(market_share_by_state)
# define a function that
# accepts a parameter column
# removes commas from a text string
# then converts the text string to a number
removeCommas <- function(column){as.numeric(gsub(",", "", column))}
# use the removeCommas() function on all number fields in the market_share_by_state
# dataframe
removeCommas(market_share_by_state$customerCount)
removeCommas(market_share_by_state$salesMegawattHours)
removeCommas(market_share_by_state$revenuesThousandsDollars)
removeCommas(market_share_by_state$averagePriceCentskwh)
View(market_share_by_state)
View(market_share_by_state)
# require the dplyr library
library(dplyr)
# get the totals by state for three measure columns, using the handy
# group_by() and summarise() functions from dplyr
# and then assign the results to the totals_by_state dataframe
#
# the three measure columns are:
# customerCount
# salesMegawattHours
# revenuesThousandsDollars
#
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
# lookup the totals from each state and add them to a new column in the
# market_share_by_state dataframe for every row, which is to say every unique
# combination of power company entity and state
#
# do this for each sum measure:
#
# sumCustomers
# sumRevenuesThousandsDollars
#
market_share_by_state$sumCustomersByState <-
totals_by_state$sumCustomers[
match(market_share_by_state$State, totals_by_state$State)]
market_share_by_state$sumRevenueByState <-
totals_by_state$sumRevenuesThousandsDollars[
match(market_share_by_state$State, totals_by_state$State)]
# sumSalesMegawattHours
market_share_by_state$sumSalesByState <-
totals_by_state$sumSalesMegawattHours[
match(market_share_by_state$State, totals_by_state$State)]
# calculate the proportion of total customers in a state that each power company entity has
market_share_by_state$customerCountProportionByState <-
market_share_by_state$customerCount / market_share_by_state$sumCustomersByState
# calculate the proportion of total revenue in a state that each power company entity has
market_share_by_state$revenueProportionByState <-
market_share_by_state$revenuesThousandsDollars / market_share_by_state$sumRevenueByState
#  calculate the proportion of total power sales in a state that each power company entity has
market_share_by_state$salesProportionByState <-
market_share_by_state$salesMegawattHours / market_share_by_state$sumSalesByState
# Set the working directory
setwd("~/workspace/quantified-home/electricity")
# read in a csv file containing the EIA data and assign it to a dataframe
# called table6
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
# assign the table6 dataframe to another dataframe called market_share_by_state
# we will leave the table6 dataframe unmodified for reference
# we will reshape the market_share_by_state dataframe to the form
# that we'll use in our visualization
market_share_by_state <- table6
# rename specific columns in the market_share_by_state dataframe to friendly camelCase
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
# define a function that
# accepts a parameter column
# removes commas from a text string
# then converts the text string to a number
removeCommas <- function(column){as.numeric(gsub(",", "", column))}
# use the removeCommas() function on all number fields in the market_share_by_state
# dataframe
market_share_by_state$customerCount <-
removeCommas(market_share_by_state$customerCount)
market_share_by_state$salesMegawattHours <-
removeCommas(market_share_by_state$salesMegawattHours)
market_share_by_state$revenuesThousandsDollars <-
removeCommas(market_share_by_state$revenuesThousandsDollars)
market_share_by_state$averagePriceCentskwh <-
removeCommas(market_share_by_state$averagePriceCentskwh)
# require the dplyr library
library(dplyr)
# get the totals by state for three measure columns, using the handy
# group_by() and summarise() functions from dplyr
# and then assign the results to the totals_by_state dataframe
#
# the three measure columns are:
# customerCount
# salesMegawattHours
# revenuesThousandsDollars
#
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
# lookup the totals from each state and add them to a new column in the
# market_share_by_state dataframe for every row, which is to say every unique
# combination of power company entity and state
#
# do this for each sum measure:
#
# sumCustomers
# sumRevenuesThousandsDollars
#
market_share_by_state$sumCustomersByState <-
totals_by_state$sumCustomers[
match(market_share_by_state$State, totals_by_state$State)]
market_share_by_state$sumRevenueByState <-
totals_by_state$sumRevenuesThousandsDollars[
match(market_share_by_state$State, totals_by_state$State)]
# sumSalesMegawattHours
market_share_by_state$sumSalesByState <-
totals_by_state$sumSalesMegawattHours[
match(market_share_by_state$State, totals_by_state$State)]
# calculate the proportion of total customers in a state that each power company entity has
market_share_by_state$customerCountProportionByState <-
market_share_by_state$customerCount / market_share_by_state$sumCustomersByState
# calculate the proportion of total revenue in a state that each power company entity has
market_share_by_state$revenueProportionByState <-
market_share_by_state$revenuesThousandsDollars / market_share_by_state$sumRevenueByState
#  calculate the proportion of total power sales in a state that each power company entity has
market_share_by_state$salesProportionByState <-
market_share_by_state$salesMegawattHours / market_share_by_state$sumSalesByState
# print the market_share_by_state dataframe in the console
market_share_by_state
# to do
# format proportions as 0.#### four decimal numbers
# replicate this 'subset and calculate proportions'
# workflow in more consise R code
# Set the working directory
setwd("~/workspace/quantified-home/electricity")
# read in a csv file containing the EIA data and assign it to a dataframe
# called table6
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
# assign the table6 dataframe to another dataframe called market_share_by_state
# we will leave the table6 dataframe unmodified for reference
# we will reshape the market_share_by_state dataframe to the form
# that we'll use in our visualization
market_share_by_state <- table6
# rename specific columns in the market_share_by_state dataframe to friendly camelCase
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
# define a function that
# accepts a parameter column
# removes commas from a text string
# then converts the text string to a number
removeCommas <- function(column){as.numeric(gsub(",", "", column))}
# use the removeCommas() function on all number fields in the market_share_by_state
# dataframe
market_share_by_state$customerCount <-
removeCommas(market_share_by_state$customerCount)
market_share_by_state$salesMegawattHours <-
removeCommas(market_share_by_state$salesMegawattHours)
market_share_by_state$revenuesThousandsDollars <-
removeCommas(market_share_by_state$revenuesThousandsDollars)
market_share_by_state$averagePriceCentskwh <-
removeCommas(market_share_by_state$averagePriceCentskwh)
# require the dplyr library
library(dplyr)
# get the totals by state for three measure columns, using the handy
# group_by() and summarise() functions from dplyr
# and then assign the results to the totals_by_state dataframe
#
# the three measure columns are:
# customerCount
# salesMegawattHours
# revenuesThousandsDollars
#
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
# lookup the totals from each state and add them to a new column in the
# market_share_by_state dataframe for every row, which is to say every unique
# combination of power company entity and state
#
# do this for each sum measure:
#
# sumCustomers
# sumRevenuesThousandsDollars
#
market_share_by_state$sumCustomersByState <-
totals_by_state$sumCustomers[
match(market_share_by_state$State, totals_by_state$State)]
market_share_by_state$sumRevenueByState <-
totals_by_state$sumRevenuesThousandsDollars[
match(market_share_by_state$State, totals_by_state$State)]
# sumSalesMegawattHours
market_share_by_state$sumSalesByState <-
totals_by_state$sumSalesMegawattHours[
match(market_share_by_state$State, totals_by_state$State)]
# calculate the proportion of total customers in a state that each power company entity has
market_share_by_state$customerCountProportionByState <-
market_share_by_state$customerCount / market_share_by_state$sumCustomersByState
# calculate the proportion of total revenue in a state that each power company entity has
market_share_by_state$revenueProportionByState <-
market_share_by_state$revenuesThousandsDollars / market_share_by_state$sumRevenueByState
#  calculate the proportion of total power sales in a state that each power company entity has
market_share_by_state$salesProportionByState <-
market_share_by_state$salesMegawattHours / market_share_by_state$sumSalesByState
# print the market_share_by_state dataframe in the console
# market_share_by_state
# to do
# format proportions as 0.#### four decimal numbers
# replicate this 'subset and calculate proportions'
# workflow in more consise R code
View(market_share_by_state)
View(market_share_by_state)
View(totals_by_state)
View(totals_by_state)
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
library(dplyr)
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
# Set the working directory
setwd("~/workspace/quantified-home/electricity")
# read in a csv file containing the EIA data and assign it to a dataframe
# called table6
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
# assign the table6 dataframe to another dataframe called market_share_by_state
# we will leave the table6 dataframe unmodified for reference
# we will reshape the market_share_by_state dataframe to the form
# that we'll use in our visualization
market_share_by_state <- table6
# rename specific columns in the market_share_by_state dataframe to friendly camelCase
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
# require the dplyr library
library(dplyr)
# get the totals by state for three measure columns, using the handy
# group_by() and summarise() functions from dplyr
# and then assign the results to the totals_by_state dataframe
#
# the three measure columns are:
# customerCount
# salesMegawattHours
# revenuesThousandsDollars
#
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
View(market_share_by_state)
View(market_share_by_state)
# Set the working directory
setwd("~/workspace/quantified-home/electricity")
# read in a csv file containing the EIA data and assign it to a dataframe
# called table6
table6 <- read.csv(file="eia_table6.xls - data.csv",head=TRUE,sep=",")
# assign the table6 dataframe to another dataframe called market_share_by_state
# we will leave the table6 dataframe unmodified for reference
# we will reshape the market_share_by_state dataframe to the form
# that we'll use in our visualization
market_share_by_state <- table6
# rename specific columns in the market_share_by_state dataframe to friendly camelCase
colnames(market_share_by_state)[c(4,5,6,7)] <- c("customerCount", "salesMegawattHours",
"revenuesThousandsDollars","averagePriceCentskwh")
# define a function that
# accepts a parameter column
# removes commas from a text string
# then converts the text string to a number
removeCommas <- function(column){as.numeric(gsub(",", "", column))}
# use the removeCommas() function on all number fields in the market_share_by_state
# dataframe
market_share_by_state$customerCount <-
removeCommas(market_share_by_state$customerCount)
market_share_by_state$salesMegawattHours <-
removeCommas(market_share_by_state$salesMegawattHours)
market_share_by_state$revenuesThousandsDollars <-
removeCommas(market_share_by_state$revenuesThousandsDollars)
market_share_by_state$averagePriceCentskwh <-
removeCommas(market_share_by_state$averagePriceCentskwh)
# require the dplyr library
library(dplyr)
# get the totals by state for three measure columns, using the handy
# group_by() and summarise() functions from dplyr
# and then assign the results to the totals_by_state dataframe
#
# the three measure columns are:
# customerCount
# salesMegawattHours
# revenuesThousandsDollars
#
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
View(market_share_by_state)
View(market_share_by_state)
totals_by_state <- market_share_by_state %>%
group_by(market_share_by_state$State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
totals_by_state <- market_share_by_state %>%
group_by(State) %>%
summarise(sumCustomers = sum(customerCount),
sumSalesMegawattHours = sum(salesMegawattHours),
sumRevenuesThousandsDollars = sum(revenuesThousandsDollars))
View(totals_by_state)
View(totals_by_state)
